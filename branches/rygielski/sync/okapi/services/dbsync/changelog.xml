<xml>
	<brief>Get the list of changes for your database</brief>
	<issue-id>WRTODO</issue-id>
	<desc>
		<p>Get the list of changes for your own copy of OpenCaching database. Use this method
		periodically (ex. once per hour) to keep your database in sync with ours. See the
		"Synchronization" section (on the left) for the details on how to set up your database
		copy.</p>
	</desc>
	<req name='since'>
		<p>Current revision of your database. This should be the same as the value
		of <b>revision</b> attribute, which you received with your previous update.</p>
		<p>Old revisions are deleted, the <b>since</b> argument MUST referer to a revision no older
		than 10 days. You have to download a fulldump if you have an older copy (see the
		"Synchronization" section on the left).</p>
	</req>
	<common-format-params/>
	<returns>
		<p>A dictionary of the following structure:</p>
		<ul>
			<li>
				<p><b>changelog</b> - a <b>list</b> of dictionaries. Each dictionary has the following structure:</p>
				<ul>
					<li>
						<p><b>object_type</b> - string, object type to which the change refers to. One of the following values:</p>
						<ul>
							<li><b>geocache</b> - this change refers to a geocache object,</li>
							<li><b>log_entry</b> - this change refers to a log entry.</li>
						</ul>
						<p>More object types will come in the future. You should ignore all changelog
						entries with an unknown object_type.</p>
					</li>
					<li>
						<p><b>object_key</b> - a dictionary of fields which compose the primary key for the object.
						This will be the <b>code</b> field for the <b>geocache</b> object, and <b>uuid</b> field
						for the <b>log_entry</b> object.</p>
					</li>
					<li>
						<p><b>change_type</b> - string, the type of the change. One of the following values:</p>
						<ul>
							<li><b>replace</b> - the object was inserted or updated. You should check if you
							already have the object in your database. If you have it, you should update its
							fields accordingly. If you don't, you should create it.</li>
							<li><b>delete</b> - the object was deleted. You should check if you already have
							the object in your database. If you do, you should delete it.</li>
						</ul>
					</li>
					<li>
						<p><b>fields</b> - a dictionary of fields associated with the object (present only
						if <b>change_type</b> equals <b>replace</b>).</p>
						<ul>
							<li>For <b>geocache</b> objects, this might be any subset of fields described
							in the services/caches/geocache method. Note that not all of these fields will
							be included here (i.e. latest_logs will not).</li>
							<li>For <b>log_entry</b> objects, this might be any subset of fields described
							in the services/logs/logs method, <b>plus</b> additional <b>cache_code</b> field,
							the code of the geocache to which the log entry refers to.</li>
						</ul>
						<p>In theory this dictionary should contain only these fields which actually changed.
						In truth, it MAY contain all the other fields too. This behavior may change in future.</p>
					</li>
				</ul>
				<p>You should iterate through this changelog sequentially. All the changes should be applied
				in the same order as they were listed in the changelog. Single object may appear multiple times
				inside the changelog. Changelog will contain all the changes which occured since the time you
				specified in the <b>since</b> parameter and it MAY contain some more, which were submitted
				<b>before</b> this date (see below). The changes which are unnecessary MAY be skipped (ex. when
				cache description changes multiple times, we may want to include only the last change).</p>
			</li>
			<li>
				<p><b>revision</b> - this is the revision number which you should use in the <b>since</b> parameter
				when you call this method next time.</p>
			</li>
			<li>
				<p><b>more</b> - boolean. If <b>false</b>, then it means that the entire changelog had been
				pulled. If <b>true</b>, then there are more items waiting to be pulled - you should rerun this
				method again (with the value of <b>revision</b> inserted in the <b>since</b> parameter).</p>
				<p>The changelog is usually tiny, but it also might be huge at times. It may even
				contain all the caches in the database (i.e. if we decide to do some changes on all
				caches in a bulk). This is the reason why we introduced the <b>more</b> attribute. It makes it
				easier to parse the changelog sequentially.</p>
			</li>
		</ul>
		<p>The response MAY contain changes recorded before the revision which you stated in your <b>since</b>
		parameter. This is due to caching. I we already have a response ready, that was produced for a
		"since" parameter which was a little more in the past, we may want to return this cached copy,
		instead of producing a new one. It will be faster for us, and you shouldn't even notice. We will
		still make sure to set the <b>revision</b> and <b>more</b> attributes in a correct way, which
		in turn will make you query us again, if you need to.</p>
	</returns>
</xml>